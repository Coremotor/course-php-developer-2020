Описание
Домашнее задание состоит из нескольких небольших отдельных, не связанных между собой задач. Каждое задание делается в отдельном файле с уникальным пространством имен.


Корзина с мячами
Эта программа будет класть в корзину мячики. При этом корзина не знает сколько в ней мячей, ведь чтобы узнать сколько мячей в корзине, их нужно пересчитать вручную, то есть снова
достать и положить, либо считать при складывании.

Но есть учет мячей: перед тем, как попасть в корзину, мяч маркируется.

1. Создать класс Box — корзина. В этом классе будет только один метод, никаких свойств классу
добавлять нельзя: public function putBall(Ball $ball) — должен вывести на экран фразу: "В корзину добавлен мяч".

2. Создать класс Ball — мяч, создать статическое свойство $count. При создании нового мяча — количество должно увеличиваться.

3. Создать корзину, положить в нее случайное число мячиков (функция rand()), а затем вывести
на экран количество мячей, которое лежит в корзине.



Фабрика котов
Да, котов производят на фабрике! :)

1. Создать класс Cat — кот. У кота должно быть три свойства: имя, цвет, возраст. Все они должны
быть инициализированы в конструкторе.

2. Создать класс CatFactory — этот класс будет создавать котов с помощью именованных
конструкторов, например:
public static function createBlack8YearsOldCat($name)
{
return new Cat($name, "black", 8);
}
Следует обратить внимание на то, что название конструктора фабрики должно точно совпасть с параметрами создаваемого кота.

3. Создать еще 6 различных статичных конструкторов в фабрике, каждый из которых будет создавать котов с разными параметрами. Должны быть конструкторы, которые
предустанавливают только 1 параметр, например createBlackCat (какие здесь
параметры по вашему мнению?). При создании кота все свойства должны быть проинициализированы значениями.

4. Создать массив котов, заполнить его, используя все созданные конструкторы, и вывести на
экран (например функцией print_r()).



В мире животных
1. Создать классы:

Рыба;

Тигр;

Медведь;

Лось;

Змея;

Курица;

Верблюд;

Слон;

Дельфин.

2. Придумать для указанных животных два уровня абстракции: базовый уровень — Animal — животное. Уровни абстракции должны быть абстрактными классами.

3. Правильно расставить наследование в созданных классах. Класс Animal должен содержать абстрактный метод move(). Все животные должны реализовать метод move(), который выводит, каким образом передвигается указанное животное.



Импорт/Экспорт с интерфейсами
Необходимо разработать механизм, с помощью которого можно провезти импорт/экспорт, взяв данные из любого источника данных и положив результат их обработки в любое другое место. При этом эти данные могут быть преобразованы любым способом.

Таким образом нужно разработать импорт, который делает следующее: считывает данные из выбранного источника, затем каждый элемент этих данных конвертирует всеми указанными конвертерами, а затем записывает результат в указанное место.

1. Создать следующие интерфейсы:

Reader — драйвер чтения — содержит один метод read(): array, который читает и возвращает данные в виде массива;

Writer — драйвер записи — содержит один метод write(array $data), который принимает
данные в виде массива для записи;

Converter — конвертация строки данных — содержит один метод convert($item) — конвертирует один элемент массива и возвращает результат конвертации.

2. Создать класс импорта Import, со свойствами $reader, $writer и $converters:

public function from(Reader $reader) — устанавливает значение свойства $reader и возвращает $this;

public function to(Writer $writer) — устанавливает значение свойства $writer и возвращает $this;

public function with(Converter $converter) — добавляет конвертер в свойство $converters и
возвращает $this;

public function execute() — производит импорт/экспорт данных из $reader в $writer.

Реализовать описанные методы.

Согласно разработанному коду, импорт можно произвести, например, такой конструкцией:
(new Import()) // Создать новый объект — импорт
->from(new YourReader()) // Зарегистрировать в импорте reader — как будем читать
->to(new YourWriter()) // Зарегистрировать в импорте writer — куда будем писать
->with(new YourConverter()) // Зарегистрировать в импорте сколько угодно конвертеров — как
данные будут обработаны перед записью.
->with(new YourConverter())
->execute()
Классы YourReader, YourWriter и YourConverter в конструкции — это названия для демонстрации
кода, под ними подразумеваются ваши реализации соответствующих интерфейсов. Названия ваших реализаций должны быть осмысленными, например, ArrayReader, но точно не YourReader.

3. Создать свои реализации Reader и Writer, например, читать из файла или массива, а писать в файл, в массив, в строку, в сессию — куда угодно.

4. Создать свои реализации Converter’а.

5. Провести свой импорт/экспорт.



Начинаем делать свою CMS

Следует внимательно изучить структуру приложенного файла index.php, ответить на вопросы:

какие классы используются;

какие методы и свойства должны быть в этих классах.

Создать необходимые классы, чтобы программа начала работать: на главной странице вывелось home, а на странице /about вывелось about.

Комментарии

Класс Application — основной класс приложения. Внутри его метода run должен быть вызван
метод dispatch класса Router и выведен результат его работы.
Класс Router — отвечает за маршрутизацию, метод get() — используется для регистрации
маршрута при http-запросе методом GET по указанному адресу; второй параметр — callback-функция или строка вида: Полное\Имя\Класса@названиеМетода, который будет вызван при прохождении по этому маршруту. Класс должен содержать метод dispatch, в котором будет определяться, какой маршрут запрошен, и выполнять callback в случае совпадения.

Файл bootstrap.php — должен содержать внутри себя подключения классов и функций (их загрузку).

Классы должны располагаться в директории src, далее — в соответствии со своим пространством имен (об этом подробнее в следующем модуле).

Дополнительное задание

1. Изучить файл index_extra.php.

2. Создать класс Controller, который будет содержать логику работы каждой из страниц.

3. Нужно подумать, как можно реализовать вызов необходимого метода из кода класса Router.

4. При реализации этого дополнительного задания, исходный вариант создания маршрута (из задания не extra) с помощью анонимный callback-функции также должен работать.